<div class="row" style="width: 100%; height: 625px">


  <div class="col-2" style="border-right: 1px solid rgb(199, 199, 199)">
    <div class="p-3 fs-3">Chats</div>
    <div class="row-auto" id="conversation-list" style="max-height: 561px; overflow-y:scroll">

    </div>
  </div>

  <div class="col-7 g-0 d-flex flex-column" style="max-height: 625px; border-right: 1px solid rgb(199, 199, 199)">
    <div class="p-3" style="flex: 0 0 auto; border-bottom: 1px solid rgb(199, 199, 199)">
      <span id="conversation-with" class="fs-3" >Placeholder</span>
    </div>
    
    <div class="p-3 d-flex flex-column" id="message-list" style="flex: 1 1 auto;overflow-y:scroll;background-color:white">

    </div>

    <div class="p-3" style="flex: 0 0 auto;  border-top: 1px solid rgb(199, 199, 199)">
      <form id="form" action="" class="d-flex align-items-center">
        <input id="input" autocomplete="off" placeholder="Message" class="form-control rounded-pill me-2" />
        <button class="btn btn-primary d-flex align-items-center"><i class="bi bi-send-fill me-2"></i>Send</button>
      </form>
    </div>
  </div>

</div>

  <script>
    const socket = io();

    const form = document.getElementById('form');
    const input = document.getElementById('input');
    const messageList = document.getElementById('message-list');
    const conversationList = document.getElementById('conversation-list');
    const conversationWith = document.getElementById('conversation-with');

    let activeChatUsername = '{{ targetUsername }}' || '';

    socket.on('init', (data) => {
      conversationList.innerHTML = '';
      for (let key in data) {
        const chatData = data[key];
        const userData = chatData.user; // The user object
        const chat = createChat(chatData);
        
        if (activeChatUsername == userData.username) refreshChatWindow(chatData) // initialize from query
      }
    });

    function createChat(chatData) {
      const userData = chatData.user; // The user object
      let profilePicSrc = userData.profilePic ? `/uploads/${userData.profilePic}` : "/images/Profile-PNG-File.png"
      let profBadge = userData.professional ? `
        <span class="badge rounded-pill text-bg-primary position-absolute" style="top:-8;right:-8">Professional</span>`
        : ""
      let div = document.createElement('div')
      div.classList.add("mx-3")
      conversationList.appendChild(div)
      div.innerHTML += `
        <div class="d-flex align-items-center mb-3 position-relative">
          <div class="circle-crop me-2" style="width:50px;height:50px;display:inline-flex">
            <img src=${profilePicSrc}>
          </div>
          <span class="fs-5">${userData.username}</span>
          ${profBadge}`

      div.addEventListener('click', () => {
          console.log("Chat clicked for user:", userData.username);
          refreshChatWindow(chatData);
      });
    }

    function refreshChatWindow(chatData) {
      const userData = chatData.user; // The user object
      activeChatUsername = userData.username;
      conversationWith.textContent = `Chat with ${userData.username}`;
      messageList.innerHTML = '';
      let curDate = ''
      chatData.messages.forEach((msg) => {
        let msgDate = getMsgDate(msg.timestamp)
        if (curDate != msgDate) { // new day, add separator
          curDate = msgDate
          messageList.innerHTML += `<span class="center timestamp fw-bold">${curDate}</span><hr>`
        }
        createMessage(msg.message, msg.sender, msg.timestamp)
        messageList.scrollTo(0, messageList.scrollHeight);
      });
    }

    function createMessage(msgBody, authorData, timestamp) {
      let dynClasses = authorData.username == '{{ user.username }}' ? 'bg-primary' : ''
      let alignment = authorData.username == '{{ user.username }}' ? 'align-self: flex-end' : 'align-self: flex-start'
      let order = authorData.username == '{{ user.username }}' ? 'flex-row-reverse' : ''
      let dynStylesMsg = authorData.username == '{{ user.username }}' ? 'color: white;' : 'background-color: rgb(200, 200, 200);'
      messageList.innerHTML += `
        <div class="d-flex align-items-center ${order}" style="width: fit-content; ${alignment}">
          <div class="${dynClasses} rounded-pill p-2 mb-1" style="${dynStylesMsg}">
            <span>${msgBody}</span>
          </div>
          <span class="timestamp">${getMsgTime(timestamp)}</span>
        </div>`
    }

    socket.on('private message', (msg) => {
      if (msg.sender.username === activeChatUsername || msg.recipient.username === activeChatUsername) {
        createMessage(msg.message, msg.sender, msg.timestamp)
        messageList.scrollTo(0, messageList.scrollHeight);
      }
    });

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      if (input.value && activeChatUsername) {
        socket.emit('private message', {
          recipient: activeChatUsername,
          message: input.value,
        });
        input.value = '';
      }
    });

    const username = '{{ user.username }}'; // This should be dynamically set based on the logged-in user
    socket.emit('join', username);
  </script>