<div class="row" style="width: 100%; height: 625px">


  <div class="col-2" style="border-right: 1px solid rgb(199, 199, 199); max-height: 625px;">
    <div class="p-3 fs-3">Chats</div>
    <div class="row-auto" id="conversation-list" style="height: 550px; overflow-y:scroll">

    </div>
  </div>

  <div class="col-7 g-0 d-flex flex-column" style="max-height: 625px; border-right: 1px solid rgb(199, 199, 199)">
    <div class="p-3" style="flex: 0 0 auto; border-bottom: 1px solid rgb(199, 199, 199)">
      <span id="conversation-with" class="fs-3" >Placeholder</span>
    </div>
    
    <div class="p-3 d-flex flex-column" id="message-list" style="flex: 1 1 auto;overflow-y:scroll;background-color:white">

    </div>

    <div class="p-3" style="flex: 0 0 auto;  border-top: 1px solid rgb(199, 199, 199)">
      <form id="form" action="" class="d-flex align-items-center">
        <input id="input" autocomplete="off" placeholder="Message" class="form-control rounded-pill me-2" />
        <button class="btn btn-primary d-flex align-items-center"><i class="bi bi-send-fill me-2"></i>Send</button>
      </form>
    </div>
  </div>

</div>

  <script>
    const socket = io();

    const form = document.getElementById('form');
    const input = document.getElementById('input');
    const messageList = document.getElementById('message-list');
    const chatList = document.getElementById('conversation-list');
    const chatTitle = document.getElementById('conversation-with');

    let activeChatId = '{{ chatId }}' || "";
    let activeChat = null

    socket.on('init', (chats) => {
      chatList.innerHTML = '';
      for (let chat of chats) {
        let chatElement = createChat(chat);
        if (activeChatId == chat._id) setActiveChat(chat, chatElement)
      }
      if (!activeChatId) setActiveChat(chats[0], chatList.children[0]) // default to first chat
    });

    function createChat(chat) {
      const otherParty = chat.participants.find(party => party.username != username); // The other party
      let profilePicSrc = otherParty.profilePic ? `/uploads/${otherParty.profilePic}` : "/images/Profile-PNG-File.png"
      let profBadge = otherParty.professional ? `
        <span class="badge rounded-pill text-bg-primary position-absolute" style="top:-8;right:-8">Professional</span>`
        : ""
      let div = document.createElement('div')
      div.id = chat._id
      div.classList.add("chatbox")
      chatList.appendChild(div)
      div.innerHTML += `
        <div class="d-flex align-items-center position-relative">
          <div class="circle-crop me-2" style="width:50px;height:50px;display:inline-flex">
            <img src=${profilePicSrc}>
          </div>
          <span class="fs-5">${otherParty.username}</span>
          ${profBadge}`

      div.addEventListener('click', () => {
          window.location.href = `/auth/inbox/${chat._id}`;
      });
      return div
    }

    function setActiveChat(chat, chatElement) {
      const otherParty = chat.participants.find(party => party.username != username); // The other party
      activeChatId = chat._id;
      activeChat = chat
      chatElement.classList.add("chatbox-active")
      chatTitle.textContent = `Chat with ${otherParty.username}`;
      messageList.innerHTML = '';
      let curDate = ''
      chat.messages.forEach((msg) => {
        let msgDate = getMsgDate(msg.timestamp)
        if (curDate != msgDate) { // new day, add separator
          curDate = msgDate
          messageList.innerHTML += `<span class="center timestamp fw-bold">${curDate}</span><hr>`
        }
        createMessage(msg.message, msg.sender, msg.timestamp)
        messageList.scrollTo(0, messageList.scrollHeight);
      });
    }

    function createMessage(msgBody, authorData, timestamp) {
      let dynClasses = authorData.username == '{{ user.username }}' ? 'bg-primary' : ''
      let alignment = authorData.username == '{{ user.username }}' ? 'align-self: flex-end' : 'align-self: flex-start'
      let order = authorData.username == '{{ user.username }}' ? 'flex-row-reverse' : ''
      let dynStylesMsg = authorData.username == '{{ user.username }}' ? 'color: white;' : 'background-color: rgb(200, 200, 200);'
      messageList.innerHTML += `
        <div class="d-flex align-items-center ${order}" style="width: fit-content; ${alignment}">
          <div class="${dynClasses} rounded-pill p-2 mb-1" style="${dynStylesMsg}">
            <span>${msgBody}</span>
          </div>
          <span class="timestamp">${getMsgTime(timestamp)}</span>
        </div>`
    }

    socket.on('private message', (msg) => {
      const otherParty = activeChat.participants.find(party => party.username != username).username
      if (msg.sender.username === otherParty || msg.recipient.username === otherParty) {
        createMessage(msg.message, msg.sender, msg.timestamp)
        messageList.scrollTo(0, messageList.scrollHeight);
      }
    });

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      if (input.value && activeChat) {
        let chatDiv = document.getElementById(activeChatId)
        chatList.insertBefore(chatDiv, chatList.firstChild);
        const otherParty = activeChat.participants.find(party => party.username != username).username
        socket.emit('private message', {
          recipient: otherParty,
          message: input.value,
          chatId: activeChatId,
        });
        input.value = '';
      }
    });

    const username = '{{ user.username }}'; // This should be dynamically set based on the logged-in user
    socket.emit('join', username);
  </script>